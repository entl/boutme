// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: projects.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (id, name, description, image_url, github_url, tech_stack, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, description, image_url, github_url, tech_stack, created_at, updated_at
`

type CreateProjectParams struct {
	ID          uuid.UUID
	Name        string
	Description string
	ImageUrl    string
	GithubUrl   string
	TechStack   []string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.GithubUrl,
		pq.Array(arg.TechStack),
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.GithubUrl,
		pq.Array(&i.TechStack),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, name, description, image_url, github_url, tech_stack, created_at, updated_at FROM projects WHERE id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.GithubUrl,
		pq.Array(&i.TechStack),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, name, description, image_url, github_url, tech_stack, created_at, updated_at FROM projects ORDER BY created_at DESC
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.GithubUrl,
			pq.Array(&i.TechStack),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = $2,
    description = $3,
    image_url = $4,
    github_url = $5,
    tech_stack = $6,
    updated_at = $7
WHERE id = $1
RETURNING id, name, description, image_url, github_url, tech_stack, created_at, updated_at
`

type UpdateProjectParams struct {
	ID          uuid.UUID
	Name        string
	Description string
	ImageUrl    string
	GithubUrl   string
	TechStack   []string
	UpdatedAt   time.Time
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.GithubUrl,
		pq.Array(arg.TechStack),
		arg.UpdatedAt,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.GithubUrl,
		pq.Array(&i.TechStack),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
